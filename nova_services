#!/usr/bin/env python
#
# Plugin to report service status
#
# Needs following minimal configuration in plugin-conf.d/nova:
#   [nova_*]
#   user nova
#
# Magic markers
#%# capabilities=autoconf
#%# family=auto

import sys

try:
    from nova import context
    from nova import db
    from nova import flags
    #from nova.openstack.common import log as logging
    from nova import utils
    from datetime import datetime
    from nova.openstack.common import cfg
    FLAGS = flags.FLAGS
    utcnow=datetime.utcnow
except ImportError:
    succesful_import = False
else:
    succesful_import = True

services = ['nova-compute', 'nova-volume', 'nova-scheduler', 'nova-vncproxy', 'nova-network', 'nova-cert', 'nova-console', 'nova-consoleauth','sws-trystack']


def print_config():
    global services
    print 'graph_title Nova Services'
    print 'graph_vlabel qty'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category nova'
    print 'graph_scale no'
    print 'graph_info Nova services - alive and active'
    for service in services:
        print '%s_alive.label %s alive' % (service, service)
        print '%s_alive.draw LINE2' % service
        print '%s_alive.info seen in last 30 seconds' % service
        print '%s_active.label %s active' % (service, service)
        print '%s_active.draw LINE2' % service
        print '%s_active.info alive and enabled' % service


def get_status():

    try: 
        argv = flags.parse_args(sys.argv)
    except cfg.ConfigFilesNotFoundError:
        cfgfile = FLAGS.config_file[-1] if FLAGS.config_file else None 
        if cfgfile and not os.access(cfgfile, os.R_OK):
            st = os.stat(cfgfile)
            print _("Could not read %s. Re-running with sudo") % cfgfile
            try: 
                os.execvp('sudo', ['sudo', '-u', '#%s' % st.st_uid] + sys.argv)
            except Exception:
                print _('sudo failed, continuing as if nothing happened')

        print _('Please re-run nova-manage as root.')
        sys.exit(2)

    global services
    alive = {}
    active = {}
    for k in services:
        alive[k] = 0
        active[k] = 0

    ctxt = context.get_admin_context()
    now = utcnow()
    services = db.service_get_all(ctxt)
    for svc in services:
        delta = now - (svc['updated_at'] or svc['created_at'])
        if (delta.seconds <= 30):
            alive[svc['binary']] += 1
            if not svc['disabled']:
                active[svc['binary']] += 1

    return {'alive': alive, 'active': active}


def print_values():
    status = get_status()
    for (state, value) in status['alive'].iteritems():
        print "%s_alive.value %s" % (state, value)
    for (state, value) in status['active'].iteritems():
        print "%s_active.value %s" % (state, value)


if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config()
        elif sys.argv[1] == "autoconf":
            if not succesful_import:  
                print 'no (failed import nova module]'
            else:
                print 'yes'
    elif succesful_import:
        print 'successful'
        flags.parse_args(sys.argv)
        print_values()
